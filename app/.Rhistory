}, symbol = names(indices))
})
# Reactive variable to store the selected country name
selected_country <- reactiveVal(NULL)
# Observe button clicks for highlighting
observe({
for (symbol in names(indices)) {
observeEvent(input[[paste0("btn_", symbol)]], {
selected_country(indices[symbol])  # Store country name
})
}
})
# Adjusted stock data based on selected base date
adjusted_data <- reactive({
base_date <- input$base_date
base_values <- stock_data %>% filter(YearMonth == format(base_date, "%Y-%m")) %>%
select(Symbol, Close) %>% rename(BaseClose = Close)
stock_data %>% left_join(base_values, by = "Symbol") %>%
mutate(AdjustedClose = Close / BaseClose) %>%
filter(!is.na(AdjustedClose))
})
# Render the interactive plot
output$stock_plot <- renderPlotly({
base_date <- input$base_date
highlight_country <- selected_country()
p <- ggplot(adjusted_data(), aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose, color = Country, group = Country)) +
geom_line(size = 1, alpha = 0.8) +
scale_color_manual(values = color_palette) +
geom_vline(xintercept = as.numeric(as.Date(base_date)), linetype = "dashed", color = "red", size = 1) +
labs(title = "Stock Market Indices (Adjusted to Base Year-Month = 1)",
x = "Year-Month", y = NULL, color = "Country") +  # Removed Y-axis label
theme_minimal() +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
# Highlight the selected country
if (!is.null(highlight_country)) {
p <- p + geom_line(data = adjusted_data() %>% filter(Country == highlight_country),
aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose),
color = "black", size = 1.5)
}
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0.5, xanchor = "center"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)
library(tidyquant)
library(ggplot2)
library(dplyr)
library(lubridate)
library(plotly)
# Define stock indices and corresponding country names
indices <- c(
"^GSPC" = "United States (S&P 500)",
"^HSI" = "Hong Kong (Hang Seng)",
"^GDAXI" = "Germany (DAX)",
"^N225" = "Japan (Nikkei 225)",
"^AXJO" = "Australia (ASX 200)",
"^FCHI" = "France (CAC 40)",
"^GSPTSE" = "Canada (TSX)",
"^STI" = "Singapore (STI)",
"^FTSE" = "United Kingdom (FTSE 100)",
"^KS11" = "South Korea (KOSPI)"
)
# Function to download stock data using tidyquant
get_stock_data <- function(symbol) {
tryCatch({
data <- tq_get(symbol, from = "1996-01-01", to = "2024-12-31", get = "stock.prices")
data <- data %>%
select(date, adjusted) %>%
mutate(YearMonth = format(date, "%Y-%m")) %>%
group_by(YearMonth) %>%
summarize(Close = last(adjusted)) %>%
mutate(Symbol = symbol, Country = indices[symbol])  # Add country names
return(data)
}, error = function(e) {
return(NULL)
})
}
# Download all stock data
stock_data <- bind_rows(lapply(names(indices), get_stock_data))
View(stock_data)
# Ensure we have valid data
if (nrow(stock_data) == 0) {
stop("No stock data was retrieved. Check your internet connection and API limits.")
}
# Generate distinct colors for each country
color_palette <- scales::hue_pal()(length(indices))
names(color_palette) <- indices  # Use country names instead of symbols
# UI
ui <- fluidPage(
titlePanel("Interactive Stock Market Indices (1996-2024)"),
sidebarLayout(
sidebarPanel(
h4("Select Base Year-Month:"),
sliderInput("base_date", "Base Year-Month",
min = min(as.Date(paste0(stock_data$YearMonth, "-01"))),
max = max(as.Date(paste0(stock_data$YearMonth, "-01"))),
value = as.Date("2000-01-01"), timeFormat = "%Y-%m", step = 30),
h4("Click a Country to Highlight:"),
uiOutput("country_buttons")
),
mainPanel(
plotlyOutput("stock_plot")
)
)
)
# Server
server <- function(input, output, session) {
# Render country selection buttons correctly
output$country_buttons <- renderUI({
lapply(seq_along(indices), function(i) {
actionButton(inputId = paste0("btn_", names(indices)[i]),
label = indices[i])
})
})
# Reactive variable to store the selected country name
selected_country <- reactiveVal(NULL)
# Observe button clicks for highlighting
observe({
for (symbol in names(indices)) {
observeEvent(input[[paste0("btn_", symbol)]], {
selected_country(indices[symbol])  # Store country name
})
}
})
# Adjusted stock data based on selected base date
adjusted_data <- reactive({
base_date <- input$base_date
base_values <- stock_data %>% filter(YearMonth == format(base_date, "%Y-%m")) %>%
select(Symbol, Close) %>% rename(BaseClose = Close)
stock_data %>% left_join(base_values, by = "Symbol") %>%
mutate(AdjustedClose = Close / BaseClose) %>%
filter(!is.na(AdjustedClose))
})
# Render the interactive plot
output$stock_plot <- renderPlotly({
base_date <- input$base_date
highlight_country <- selected_country()
p <- ggplot(adjusted_data(), aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose, color = Country, group = Country)) +
geom_line(size = 1, alpha = 0.8) +
scale_color_manual(values = color_palette) +
geom_vline(xintercept = as.numeric(as.Date(base_date)), linetype = "dashed", color = "red", size = 1) +
labs(title = "Stock Market Indices (Adjusted to Base Year-Month = 1)",
x = NULL, y = NULL, color = "Country") +  # Removed axis labels
theme_minimal() +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
# Highlight the selected country
if (!is.null(highlight_country)) {
p <- p + geom_line(data = adjusted_data() %>% filter(Country == highlight_country),
aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose),
color = "black", size = 1.5)
}
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0.5, xanchor = "center"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
titlePanel("Interactive Stock Market Indices (1996-2024)"),
# Graph first, UI below
mainPanel(
plotlyOutput("stock_plot"),
hr(), # Adds a horizontal line for separation
# UI elements below the graph
sidebarPanel(
h4("Select Base Year-Month:"),
sliderInput("base_date", "Base Year-Month",
min = min(as.Date(paste0(stock_data$YearMonth, "-01"))),
max = max(as.Date(paste0(stock_data$YearMonth, "-01"))),
value = as.Date("2000-01-01"), timeFormat = "%Y-%m", step = 30),
h4("Click a Country to Highlight:"),
uiOutput("country_buttons")
)
)
)
# Server
server <- function(input, output, session) {
# Render country selection buttons correctly
output$country_buttons <- renderUI({
lapply(seq_along(indices), function(i) {
actionButton(inputId = paste0("btn_", names(indices)[i]),
label = indices[i], style = "margin: 3px;")
})
})
# Reactive variable to store the selected country name
selected_country <- reactiveVal(NULL)
# Observe button clicks for highlighting
observe({
for (symbol in names(indices)) {
observeEvent(input[[paste0("btn_", symbol)]], {
selected_country(indices[[symbol]])  # Store country name properly
}, ignoreNULL = FALSE, ignoreInit = TRUE)
}
})
# Adjusted stock data based on selected base date
adjusted_data <- reactive({
base_date <- input$base_date
base_values <- stock_data %>% filter(YearMonth == format(base_date, "%Y-%m")) %>%
select(Symbol, Close) %>% rename(BaseClose = Close)
stock_data %>% left_join(base_values, by = "Symbol") %>%
mutate(AdjustedClose = Close / BaseClose) %>%
filter(!is.na(AdjustedClose))
})
# Render the interactive plot
output$stock_plot <- renderPlotly({
base_date <- input$base_date
highlight_country <- selected_country()
p <- ggplot(adjusted_data(), aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose, color = Country, group = Country)) +
geom_line(size = 1, alpha = 0.8) +
scale_color_manual(values = color_palette) +
geom_vline(xintercept = as.numeric(as.Date(base_date)), linetype = "dashed", color = "red", size = 1) +
labs(title = "Stock Market Indices (Adjusted to Base Year-Month = 1)",
x = NULL, y = NULL, color = "Country") +  # Removed axis labels
theme_minimal() +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
# Highlight the selected country
if (!is.null(highlight_country)) {
p <- p + geom_line(data = adjusted_data() %>% filter(Country == highlight_country),
aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose),
color = "black", size = 1.5)
}
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0.5, xanchor = "center"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generate distinct colors for each country, except South Korea (which will be black)
color_palette <- scales::hue_pal()(length(indices))
rm(list=ls())
# Generate distinct colors for each country, except South Korea (which will be black)
color_palette <- scales::hue_pal()(length(indices))
# Define stock indices and corresponding country names
indices <- c(
"^GSPC" = "United States (S&P 500)",
"^HSI" = "Hong Kong (Hang Seng)",
"^GDAXI" = "Germany (DAX)",
"^N225" = "Japan (Nikkei 225)",
"^AXJO" = "Australia (ASX 200)",
"^FCHI" = "France (CAC 40)",
"^GSPTSE" = "Canada (TSX)",
"^STI" = "Singapore (STI)",
"^FTSE" = "United Kingdom (FTSE 100)",
"^KS11" = "South Korea (KOSPI)"  # South Korea will be black
)
# Function to download stock data using tidyquant
get_stock_data <- function(symbol) {
tryCatch({
data <- tq_get(symbol, from = "1996-01-01", to = "2024-12-31", get = "stock.prices")
data <- data %>%
select(date, adjusted) %>%
mutate(YearMonth = format(date, "%Y-%m")) %>%
group_by(YearMonth) %>%
summarize(Close = last(adjusted)) %>%
mutate(Symbol = symbol, Country = indices[symbol])  # Add country names
return(data)
}, error = function(e) {
return(NULL)
})
}
# Download all stock data
stock_data <- bind_rows(lapply(names(indices), get_stock_data))
# Ensure we have valid data
if (nrow(stock_data) == 0) {
stop("No stock data was retrieved. Check your internet connection and API limits.")
}
# Generate distinct colors for each country, except South Korea (which will be black)
color_palette <- scales::hue_pal()(length(indices))
names(color_palette) <- indices
color_palette["South Korea (KOSPI)"] <- "black"  # South Korea is always black
# UI
ui <- fluidPage(
titlePanel("Interactive Stock Market Indices (1996-2024)"),
# Graph first, UI below
mainPanel(
plotlyOutput("stock_plot"),
hr(), # Adds a horizontal line for separation
# UI elements below the graph
sidebarPanel(
h4("Select Base Year-Month:"),
sliderInput("base_date", "Base Year-Month",
min = min(as.Date(paste0(stock_data$YearMonth, "-01"))),
max = max(as.Date(paste0(stock_data$YearMonth, "-01"))),
value = as.Date("2000-01-01"), timeFormat = "%Y-%m", step = 30)
)
)
)
# Server
server <- function(input, output, session) {
# Adjusted stock data based on selected base date
adjusted_data <- reactive({
base_date <- input$base_date
base_values <- stock_data %>% filter(YearMonth == format(base_date, "%Y-%m")) %>%
select(Symbol, Close) %>% rename(BaseClose = Close)
stock_data %>% left_join(base_values, by = "Symbol") %>%
mutate(AdjustedClose = Close / BaseClose) %>%
filter(!is.na(AdjustedClose))
})
# Render the interactive plot
output$stock_plot <- renderPlotly({
base_date <- input$base_date
p <- ggplot(adjusted_data(), aes(x = as.Date(paste0(YearMonth, "-01")), y = AdjustedClose, color = Country, group = Country)) +
geom_line(size = 1, alpha = 0.8) +
scale_color_manual(values = color_palette) +
geom_vline(xintercept = as.numeric(as.Date(base_date)), linetype = "dashed", color = "red", size = 1) +
labs(title = "Stock Market Indices (Adjusted to Base Year-Month = 1)",
x = NULL, y = NULL, color = "Country") +  # Removed axis labels
theme_minimal() +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0.5, xanchor = "center"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='9qhvt0-ji0woong-chung', token='6F945481559A4E4442199EAA86F38076', secret='tSNTyRHFW41Ye2pRDXzpL7f29y2uptb4YMAvis0e')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
getwd()
# Run the application
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document", echo=TRUE)
getwd()
rsconnect::deployApp("/app")
rsconnect::deployApp("app")
getwd()
rsconnect::deployApp("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app")
shiny::runApp("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app")
shiny::runApp("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app")
getwd()
setwd("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app")
shiny::runApp("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app")
rsconnect::deployApp("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app")
rsconnect::deployApp("c:/Users/user/Dropbox/Teaching/BUSS254-Slides/app", appName = "buss254-stock-app")
rm(list=ls())
library(shiny)
library(tidyquant)
library(ggplot2)
library(dplyr)
library(lubridate)
library(plotly)
# Define stock indices and corresponding country names
indices <- c(
"^GSPC" = "United States (S&P 500)",
"^HSI" = "Hong Kong (Hang Seng)",
"^GDAXI" = "Germany (DAX)",
"^N225" = "Japan (Nikkei 225)",
"^AXJO" = "Australia (ASX 200)",
"^FCHI" = "France (CAC 40)",
"^GSPTSE" = "Canada (TSX)",
"^STI" = "Singapore (STI)",
"^FTSE" = "United Kingdom (FTSE 100)",
"^KS11" = "South Korea (KOSPI)" # South Korea will be black
)
# Fetch stock data efficiently for all indices at once
get_stock_data <- function(symbols) {
tryCatch({
data <- tq_get(symbols, from = "1996-01-01", to = "2024-12-31", get = "stock.prices") %>%
select(symbol, date, adjusted) %>%
mutate(
YearMonth = format(date, "%Y-%m"),
Country = indices[symbol]
) %>%
group_by(symbol, YearMonth, Country) %>%
summarize(Close = last(adjusted), .groups = "drop")
return(data)
}, error = function(e) {
message("Error fetching data: ", conditionMessage(e))
return(NULL)
})
}
# Download all stock data
stock_data <- get_stock_data(names(indices))
# Stop execution if no data is retrieved
if (is.null(stock_data) || nrow(stock_data) == 0) {
stop("No stock data was retrieved. Check your internet connection and API limits.")
}
# Generate distinct colors for each country, except South Korea (which will be black)
color_palette <- setNames(scales::hue_pal()(length(indices)), indices)
color_palette["South Korea (KOSPI)"] <- "black"  # South Korea is always black
# UI
ui <- fluidPage(
titlePanel("Interactive Stock Market Indices (1996-2024)"),
sidebarLayout(
sidebarPanel(
h4("Select Base Year-Month:"),
dateInput("base_date", "Base Year-Month",
value = as.Date("2000-01-01"),
min = min(as.Date(paste0(stock_data$YearMonth, "-01"))),
max = max(as.Date(paste0(stock_data$YearMonth, "-01"))),
format = "yyyy-mm"),
helpText("This adjusts all indices so the selected date equals 1.")
),
mainPanel(
plotlyOutput("stock_plot"),
hr()
)
)
)
# Server
server <- function(input, output, session) {
adjusted_data <- reactive({
req(input$base_date)
base_date <- input$base_date
base_values <- stock_data %>%
filter(YearMonth == format(base_date, "%Y-%m")) %>%
select(symbol, Close) %>%
rename(BaseClose = Close)
stock_data %>%
left_join(base_values, by = "symbol") %>%
mutate(AdjustedClose = Close / BaseClose) %>%
filter(!is.na(AdjustedClose))
})
output$stock_plot <- renderPlotly({
p <- ggplot(adjusted_data(), aes(
x = as.Date(paste0(YearMonth, "-01")),
y = AdjustedClose,
color = Country,
group = Country
)) +
geom_line(size = 1, alpha = 0.8) +
scale_color_manual(values = color_palette) +
geom_vline(xintercept = as.numeric(input$base_date), linetype = "dashed", color = "red", size = 1) +
labs(
title = "Stock Market Indices (Adjusted to Base Year-Month = 1)",
x = "Year",
y = "Relative Performance",
color = "Country"
) +
theme_minimal() +
theme(legend.position = "bottom", legend.text = element_text(size = 10), plot.title = element_text(hjust = 0.5, size = 14))
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0.5, xanchor = "center"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generate distinct colors for each country, except South Korea (which will be black)
color_palette <- setNames(scales::hue_pal()(length(indices)), indices)
color_palette["South Korea (KOSPI)"] <- "black"  # South Korea is always black
# UI
ui <- fluidPage(
titlePanel("Interactive Stock Market Indices (1996-2024)"),
# Expand layout width
fluidRow(
column(width = 12, align = "center",
plotlyOutput("stock_plot", height = "550px") # Enlarged graph
)
),
hr(),  # Separation line
# UI controls below graph
fluidRow(
column(width = 10, offset = 1,
h4("Select Base Year-Month:"),
sliderInput("base_date", "Base Year-Month",
min = as.Date(min(paste0(stock_data$YearMonth, "-01"))),
max = as.Date(max(paste0(stock_data$YearMonth, "-01"))),
value = as.Date("2000-01-01"),
timeFormat = "%Y-%m", step = 30, width = "100%"),  # Full-width slider
helpText("This adjusts all indices so the selected date equals 1.", style = "text-align:center;")
)
)
)
# Server
server <- function(input, output, session) {
adjusted_data <- reactive({
req(input$base_date)
base_date <- input$base_date
base_values <- stock_data %>%
filter(YearMonth == format(base_date, "%Y-%m")) %>%
select(symbol, Close) %>%
rename(BaseClose = Close)
stock_data %>%
left_join(base_values, by = "symbol") %>%
mutate(AdjustedClose = Close / BaseClose) %>%
filter(!is.na(AdjustedClose))
})
output$stock_plot <- renderPlotly({
p <- ggplot(adjusted_data(), aes(
x = as.Date(paste0(YearMonth, "-01")),
y = AdjustedClose,
color = Country,
group = Country
)) +
geom_line(size = 1.2, alpha = 0.85) +
scale_color_manual(values = color_palette) +
geom_vline(xintercept = as.numeric(input$base_date), linetype = "dashed", color = "red", size = 1.2) +
labs(
title = "Stock Market Indices (Adjusted to Base Year-Month = 1)",
x = "Year",
y = "Relative Performance",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 16)
)
ggplotly(p) %>% layout(legend = list(orientation = "h", x = 0.5, xanchor = "center"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/user/Dropbox/Teaching/BUSS254-Slides/app')
